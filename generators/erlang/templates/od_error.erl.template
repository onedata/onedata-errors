%%%-------------------------------------------------------------------
%%% This file has been automatically generated - DO NOT EDIT!!!
%%%
%%% @copyright (C) 2025 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc
%%% This module defines od_error record interface - implemented for onedata 
%%% errors that are to be returned via API calls. Each such error should have a
%%% dedicated module implementing the callbacks.
%%% @end
%%%-------------------------------------------------------------------
-module(od_error).

-include("errors.hrl").

%% API
-export([
    build_ctx/2,
    ctx_to_json/1,
    ctx_from_json/1,

    format_description/2,
    format_csv/1,

    onedata_errors_revision/0
]).


-type http_code() :: 400 | 401 | 403 | 404 | 409 | 422 | 500 | 501 | 503.

-type errno() :: 
    ?OK | ?E2BIG | ?EACCES | ?EADDRINUSE | ?EADDRNOTAVAIL |
    ?EAFNOSUPPORT | ?EAGAIN | ?EALREADY | ?EBADF | ?EBADMSG | ?EBUSY |
    ?ECANCELED | ?ECHILD | ?ECONNABORTED | ?ECONNREFUSED | ?ECONNRESET |
    ?EDEADLK | ?EDESTADDRREQ | ?EDOM | ?EEXIST | ?EFAULT | ?EFBIG |
    ?EHOSTUNREACH | ?EIDRM | ?EILSEQ | ?EINPROGRESS | ?EINTR | ?EINVAL | ?EIO |
    ?EISCONN | ?EISDIR | ?EKEYEXPIRED | ?ELOOP | ?EMFILE | ?EMLINK | ?EMSGSIZE |
    ?ENAMETOOLONG | ?ENETDOWN | ?ENETRESET | ?ENETUNREACH | ?ENFILE | ?ENOBUFS |
    ?ENODATA | ?ENODEV | ?ENOENT | ?ENOEXEC | ?ENOLCK | ?ENOLINK | ?ENOMEM |
    ?ENOMSG | ?ENOPROTOOPT | ?ENOSPC | ?ENOSR | ?ENOSTR | ?ENOSYS | ?ENOTCONN |
    ?ENOTDIR | ?ENOTEMPTY | ?ENOTRECOVERABLE | ?ENOTSOCK | ?ENOTSUP | ?ENOTTY |
    ?ENXIO | ?EOPNOTSUPP | ?EOVERFLOW | ?EOWNERDEAD | ?EPERM | ?EPIPE |
    ?EPROTO | ?EPROTONOSUPPORT | ?EPROTOTYPE | ?ERANGE | ?EROFS | ?ESPIPE |
    ?ESRCH | ?ETIME | ?ETIMEDOUT | ?ETXTBSY | ?EWOULDBLOCK | ?EXDEV.

-type ctx() :: #od_error_ctx{{}}.

-export_type([http_code/0, errno/0, ctx/0]).

% TODO VFS-12637 - remove below type after below errors are generated in new format
-type deprecated_error() ::
    od_error_already_exists:t() | 
    od_error_not_found:t() | 
    od_error_not_supported:t() | 
    od_error_timeout:t().

{error_group_type_specs}

-export_type([
    deprecated_error/0,
    {error_group_type_exports}
]).


%%%===================================================================
%%% od_error behaviour definition
%%%===================================================================


%%--------------------------------------------------------------------
%% @doc
%% Encodes an error JSON object.
%% @end
%%--------------------------------------------------------------------
-callback to_json(error()) -> json_utils:json_map().


%%--------------------------------------------------------------------
%% @doc
%% Decodes an error from a JSON object.
%% @end
%%--------------------------------------------------------------------
-callback from_json(json_utils:json_map()) -> error().


%%--------------------------------------------------------------------
%% @doc
%% Returns HTTP code to be returned in REST response.
%% @end
%%--------------------------------------------------------------------
-callback to_http_code(error()) -> http_code().


%%--------------------------------------------------------------------
%% @doc
%% Returns POSIX errno associated with the error.
%% @end
%%--------------------------------------------------------------------
-callback to_errno(error()) -> false | {{true, errno()}}.


%%%===================================================================
%%% API
%%%===================================================================


%%--------------------------------------------------------------------
%% @doc
%% Builds an error context record for error creation.
%%
%% ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ 
%% @warning CRITICAL IMPLEMENTATION REQUIREMENT
%% This function has strict requirements that MUST be followed to prevent 
%% system crashes:
%%
%% Must only use simple functions that cannot throw onedata errors themselves.
%% This is critical to prevent infinite recursion scenarios:
%%   * Error context creation triggers an error
%%   * Error creation requires new error context
%%   * New context creation triggers the same error again
%%   * Process repeats indefinitely
%%
%% @attention
%% Violating these requirements can lead to system instability and crashes.
%% This is not just a recommendation - it's a hard requirement for system stability.
%% ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ 
%% @end
%%--------------------------------------------------------------------
-spec build_ctx(module(), integer()) -> ctx().
build_ctx(Module, Line) ->
    #od_error_ctx{{
        onedata_errors_revision = onedata_errors_revision(),
        module = str_utils:to_binary(Module),
        line = Line,
        timestamp = global_clock:timestamp_millis(),
        service = get_env(onedata_service),
        service_id = to_binary_if_defined(get_env(onedata_service_id)),
        service_domain = to_binary_if_defined(get_env(onedata_service_domain)),
        service_release_version = to_binary_if_defined(get_env(onedata_service_release_version)),
        service_build_version = to_binary_if_defined(get_env(onedata_service_build_version))
    }}.


-spec ctx_to_json
    (undefined) -> null;
    (ctx()) -> json_utils:json_map().
ctx_to_json(undefined) ->
    null;
ctx_to_json(#od_error_ctx{{
    onedata_errors_revision = Version,
    module = Module,
    line = Line, 
    timestamp = Timestamp,
    service = Service,
    service_id = ServiceId,
    service_domain = ServiceDomain,
    service_release_version = ServiceReleaseVersion,
    service_build_version = ServiceBuildVersion,
    unknown_fields = UnknownFields
}}) ->
    KnownValues = #{{
        <<"onedataErrorsRevision">> => utils:undefined_to_null(Version),
        <<"module">> => utils:undefined_to_null(Module),
        <<"line">> => utils:undefined_to_null(Line), 
        <<"timestamp">> => utils:undefined_to_null(Timestamp),
        <<"service">> => case Service of
            undefined -> null;
            _ -> onedata:service_shortname(Service)
        end,
        <<"serviceId">> => utils:undefined_to_null(ServiceId),
        <<"serviceDomain">> => utils:undefined_to_null(ServiceDomain),
        <<"serviceReleaseVersion">> => utils:undefined_to_null(ServiceReleaseVersion),
        <<"serviceBuildVersion">> => utils:undefined_to_null(ServiceBuildVersion)
    }},
    % Preserve any unknown fields that might be present
    maps:merge(UnknownFields, KnownValues).


-spec ctx_from_json
    (null) -> undefined;
    (json_utils:json_map()) -> ctx().
ctx_from_json(null) ->
    undefined;
ctx_from_json(Json) ->
    % Extract known fields
    KnownKeys = [
        <<"onedataErrorsRevision">>, <<"module">>, <<"line">>, <<"timestamp">>,
        <<"service">>, <<"serviceId">>, <<"serviceDomain">>,
        <<"serviceReleaseVersion">>, <<"serviceBuildVersion">>
    ],
    UnknownFields = maps:without(KnownKeys, Json),

    #od_error_ctx{{
        onedata_errors_revision = get_json_value_or_undefined(<<"onedataErrorsRevision">>, Json),
        module = get_json_value_or_undefined(<<"module">>, Json),
        line = get_json_value_or_undefined(<<"line">>, Json),
        timestamp = get_json_value_or_undefined(<<"timestamp">>, Json),
        service = case maps:get(<<"service">>, Json, null) of
            null -> undefined;
            Service -> onedata:service_by_shortname(Service)
        end,
        service_id = get_json_value_or_undefined(<<"serviceId">>, Json),
        service_domain = get_json_value_or_undefined(<<"serviceDomain">>, Json),
        service_release_version = get_json_value_or_undefined(<<"serviceReleaseVersion">>, Json),
        service_build_version = get_json_value_or_undefined(<<"serviceBuildVersion">>, Json),
        unknown_fields = UnknownFields
    }}.


%% @private
-spec get_json_value_or_undefined(binary(), json_utils:json_map()) -> 
    undefined | json_utils:json_term().
get_json_value_or_undefined(Key, JsonMap) ->
    utils:null_to_undefined(maps:get(Key, JsonMap, null)).


-spec format_description(string(), [term()]) -> binary().
format_description(Format, Args) ->
    Desc = str_utils:format_bin(Format, Args),
    TrimmedDesc = string:trim(Desc, trailing, "."),
    <<TrimmedDesc/binary, ".">>.


-spec format_csv([term()]) -> binary().
format_csv(Values) ->
    str_utils:join_as_binaries(Values, <<", ">>).


-spec onedata_errors_revision() -> binary().
onedata_errors_revision() ->
    <<"{version}">>.


%%%===================================================================
%%% Internal functions
%%%===================================================================


%% @private
-spec get_env(atom()) -> term().
get_env(Key) ->
    try
        ctool:get_env(Key, undefined)
    catch _:_ ->
        undefined
    end.


%% @private
-spec to_binary_if_defined(term()) -> undefined | binary().
to_binary_if_defined(undefined) -> undefined;
to_binary_if_defined(Value) -> str_utils:to_binary(Value).
