%%%-------------------------------------------------------------------
%%% This file has been automatically generated - DO NOT EDIT!!!
%%%
%%% @copyright (C) 2024 ACK CYFRONET AGH
%%% This software is released under the MIT license
%%% cited in 'LICENSE.txt'.
%%% @end
%%%-------------------------------------------------------------------
%%% @doc
%%% Error definitions to be used across all APIs in Onedata products.
%%% @end
%%%-------------------------------------------------------------------

-ifndef(ERRORS_HRL).
-define(ERRORS_HRL, 1).

-include("global_definitions.hrl").
-include("posix/errno.hrl").


-record(od_error_ctx, {{
    file :: string(),
    line :: integer(),
    timestamp :: time:iso8601(),
    version :: string()
}}).

-record(od_error, {{
    type :: module(),
    args = undefined :: term(),
    ctx :: od_error:ctx()
}}).

-define(infer_error_ctx(),
    #od_error_ctx{{
        file = ?FILE,
        line = ?LINE,
        timestamp = od_error:iso8601_now(),
        version = od_error:version()
    }}
).

-define(ERROR, #od_error{{}}).
-define(ERROR(Type), #od_error{{type = Type}}).
-define(ERROR(Type, Args), #od_error{{type = Type, args = Args}}).
-define(ERROR(Type, Args, Ctx), #od_error{{type = Type, args = Args, ctx = Ctx}}).


%%--------------------------------------------------------------------
%% Unknown / unexpected error
%%--------------------------------------------------------------------
% Used to carry errors that have the proper JSON error format, but do not match
% any error specified in this software version. This can happen if a newer
% server responds with an error to an older client, which does not know the
% error Id. The original JSON representing the error is retained and returned
% upon encoding.
-define(ERROR_UNRECOGNIZED_ERROR_TYPE, od_error_unrecognized_error).
-define(ERROR_UNRECOGNIZED_ERROR_MATCH(ErrorAsJson), 
    ?ERROR(?ERROR_UNRECOGNIZED_ERROR_TYPE, {{ErrorAsJson}})
).
-define(new_ERROR_UNRECOGNIZED_ERROR(ErrorAsJson), 
    ?ERROR(?ERROR_UNRECOGNIZED_ERROR_TYPE, {{ErrorAsJson}}, ?infer_error_ctx())
).

{macros}

-endif.
